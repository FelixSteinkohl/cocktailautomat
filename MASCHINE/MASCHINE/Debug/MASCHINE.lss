
MASCHINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  0000024a  000002de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000601  00800204  00800204  000002e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000020aa  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081c  00000000  00000000  000025cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ec6  00000000  00000000  00002de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000630  00000000  00000000  00004cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000124f5  00000000  00000000  000052e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021ca  00000000  00000000  000177d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003b8  00000000  00000000  0001999f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00005386  00000000  00000000  00019d57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	9a c0       	rjmp	.+308    	; 0x18a <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e4       	ldi	r30, 0x4A	; 74
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	28 e0       	ldi	r18, 0x08	; 8
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 30       	cpi	r26, 0x05	; 5
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	92 d0       	rcall	.+292    	; 0x244 <main>
 120:	92 c0       	rjmp	.+292    	; 0x246 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <move_test>:
 
  // Compare Interrupt erlauben
  TIMSK0 |= (1<<OCIE0A);
 
  // Global Interrupts aktivieren
  sei();
 124:	41 e0       	ldi	r20, 0x01	; 1
 126:	80 91 05 02 	lds	r24, 0x0205
 12a:	90 91 06 02 	lds	r25, 0x0206
 12e:	20 91 02 02 	lds	r18, 0x0202
 132:	30 91 03 02 	lds	r19, 0x0203
 136:	82 17       	cp	r24, r18
 138:	93 07       	cpc	r25, r19
 13a:	24 f4       	brge	.+8      	; 0x144 <move_test+0x20>
 13c:	40 93 04 02 	sts	0x0204, r20
 140:	50 9a       	sbi	0x0a, 0	; 10
 142:	0a c0       	rjmp	.+20     	; 0x158 <move_test+0x34>
 144:	20 91 00 02 	lds	r18, 0x0200
 148:	30 91 01 02 	lds	r19, 0x0201
 14c:	28 17       	cp	r18, r24
 14e:	39 07       	cpc	r19, r25
 150:	1c f4       	brge	.+6      	; 0x158 <move_test+0x34>
 152:	10 92 04 02 	sts	0x0204, r1
 156:	50 98       	cbi	0x0a, 0	; 10
 158:	51 9a       	sbi	0x0a, 1	; 10
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	92 e0       	ldi	r25, 0x02	; 2
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <move_test+0x3c>
 168:	00 c0       	rjmp	.+0      	; 0x16a <move_test+0x46>
 16a:	00 00       	nop
 16c:	51 98       	cbi	0x0a, 1	; 10
 16e:	80 91 04 02 	lds	r24, 0x0204
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	c1 f6       	brne	.-80     	; 0x126 <move_test+0x2>
 176:	80 91 05 02 	lds	r24, 0x0205
 17a:	90 91 06 02 	lds	r25, 0x0206
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	90 93 06 02 	sts	0x0206, r25
 184:	80 93 05 02 	sts	0x0205, r24
 188:	ce cf       	rjmp	.-100    	; 0x126 <move_test+0x2>

0000018a <__vector_21>:
wird aufgerufen, wenn
TCNT0 = OCR0A = 125-1
ist (125 Schritte), d.h. genau alle 1 ms
*/
ISR (TIMER0_COMPA_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
millisekunden++;
 19a:	80 91 07 02 	lds	r24, 0x0207
 19e:	90 91 08 02 	lds	r25, 0x0208
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	90 93 08 02 	sts	0x0208, r25
 1a8:	80 93 07 02 	sts	0x0207, r24
if(millisekunden == 1000)
 1ac:	80 91 07 02 	lds	r24, 0x0207
 1b0:	90 91 08 02 	lds	r25, 0x0208
 1b4:	88 3e       	cpi	r24, 0xE8	; 232
 1b6:	93 40       	sbci	r25, 0x03	; 3
 1b8:	e9 f5       	brne	.+122    	; 0x234 <__vector_21+0xaa>
{
sekunde++;
 1ba:	80 91 13 02 	lds	r24, 0x0213
 1be:	90 91 14 02 	lds	r25, 0x0214
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	90 93 14 02 	sts	0x0214, r25
 1c8:	80 93 13 02 	sts	0x0213, r24
millisekunden = 0;
 1cc:	10 92 08 02 	sts	0x0208, r1
 1d0:	10 92 07 02 	sts	0x0207, r1
if(sekunde == 60)
 1d4:	80 91 13 02 	lds	r24, 0x0213
 1d8:	90 91 14 02 	lds	r25, 0x0214
 1dc:	cc 97       	sbiw	r24, 0x3c	; 60
 1de:	69 f4       	brne	.+26     	; 0x1fa <__vector_21+0x70>
{
minute++;
 1e0:	80 91 09 02 	lds	r24, 0x0209
 1e4:	90 91 0a 02 	lds	r25, 0x020A
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	90 93 0a 02 	sts	0x020A, r25
 1ee:	80 93 09 02 	sts	0x0209, r24
sekunde = 0;
 1f2:	10 92 14 02 	sts	0x0214, r1
 1f6:	10 92 13 02 	sts	0x0213, r1
}
if(minute == 60)
 1fa:	80 91 09 02 	lds	r24, 0x0209
 1fe:	90 91 0a 02 	lds	r25, 0x020A
 202:	cc 97       	sbiw	r24, 0x3c	; 60
 204:	69 f4       	brne	.+26     	; 0x220 <__vector_21+0x96>
{
stunde++;
 206:	80 91 11 02 	lds	r24, 0x0211
 20a:	90 91 12 02 	lds	r25, 0x0212
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	90 93 12 02 	sts	0x0212, r25
 214:	80 93 11 02 	sts	0x0211, r24
minute = 0;
 218:	10 92 0a 02 	sts	0x020A, r1
 21c:	10 92 09 02 	sts	0x0209, r1
}
if(stunde == 24)
 220:	80 91 11 02 	lds	r24, 0x0211
 224:	90 91 12 02 	lds	r25, 0x0212
 228:	48 97       	sbiw	r24, 0x18	; 24
 22a:	21 f4       	brne	.+8      	; 0x234 <__vector_21+0xaa>
{
stunde = 0;
 22c:	10 92 12 02 	sts	0x0212, r1
 230:	10 92 11 02 	sts	0x0211, r1
}
}
}
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <main>:

//test= uart_getstring();

while (1)
{
move_test();
 244:	6f df       	rcall	.-290    	; 0x124 <move_test>

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
